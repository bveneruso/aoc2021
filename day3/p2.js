const util = require('../helpers/util.js');

/**
 * Generates a number with either the most common value for each bit or the least common
 * @param numbers Input array, numbers should be binary strings
 * @param findMostCommonBit True to find most common bits, false to find least common
 * @returns {string} Most or least common combination of bits
 */
let findCommonNumber = function(numbers, findMostCommonBit) {
	let totalCount = 0;
	let numberOfOnesInIndex = {};
	let realValue = '';
	for(let j = 0; j < numbers.length; j++) {
		totalCount++;
		let line = numbers[j];
		realValue = '';
		for (let i = 0; i < line.length; i++) {
			if (line.charAt(i) === '1') {
				if (!numberOfOnesInIndex.hasOwnProperty(i))
					numberOfOnesInIndex[i] = 0;
				numberOfOnesInIndex[i]++;
			}

			let oneCount = numberOfOnesInIndex.hasOwnProperty(i) ? numberOfOnesInIndex[i] : 0;
			realValue += (oneCount >= totalCount - oneCount) ? (findMostCommonBit ? '1' : '0') : (findMostCommonBit ? '0' : '1');
		}
	}
	return realValue;
}

/**
 * Finds the binary number in the numbers array that is closest to the number
 * 	generated by the most or least common combination of bits
 * @param numbers Input binary strings
 * @param findMostCommonBit Whether to find the most or least common bits
 * @returns Closest number is numbers to the most or least common combination of bits (recursively)
 */
let findClosestNumber = function(numbers, findMostCommonBit) {
	let ourNumbers = [];
	ourNumbers.push(...numbers);
	let index = 0;

	while(ourNumbers.length > 1) {
		let commonNumber = findCommonNumber(ourNumbers, findMostCommonBit);
		let matches = [];
		for(let i = 0; i < ourNumbers.length; i++) {
			let number = ourNumbers[i];
			if(number.charAt(index) === commonNumber.charAt(index)) {
				matches.push(number);
			}
		}

		ourNumbers = matches;
		index++;
	}
	return ourNumbers[0];
}

let run = async function() {
	let binary = [];

	await util.readFile(`${__dirname}/p2input.txt`, function(line) {
		binary.push(line);
	});

	let bestOx = findClosestNumber(binary, true);
	let bestO2 = findClosestNumber(binary, false);

	return parseInt(bestOx, 2) * parseInt(bestO2, 2);
}

module.exports = {
	run
}
